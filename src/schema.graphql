type Chat {
  id: Int!
  messages: [Message]
  users: [User]
  couple: Couple
  createdAt: String!
  updatedAt: String
}

type Couple {
  id: Int!
  status: String!
  users: [User]
  placeId: Int
  place: Place
  chatId: Int
  chat: Chat
  createdAt: String!
  updatedAt: String
}

type Message {
  id: Int!
  text: String!
  chatId: Int!
  chat: Chat!
  userId: Int!
  user: User!
  createdAt: String!
  updatedAt: String
}

type Place {
  id: Int!
  name: String!
  lat: Float!
  lng: Float!
  star: Int!
  address: String!
  explanation: String
  isTaken: Boolean!
  couples: [Couple]
  createdAt: String!
  updatedAt: String
}

type SignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type Mutation {
  SignIn(email: String!, password: String!): SignInResponse!
  SignUp(name: String!, email: String!, password: String!, gender: String!, age: Int): SignUpResponse!
}

type SignUpResponse {
  ok: Boolean!
  error: String
  token: String
}

type User {
  id: Int!
  email: String!
  name: String!
  password: String!
  gender: String!
  age: Int
  isVerified: Boolean!
  isMatched: Boolean!
  lastLng: Float
  lastLat: Float
  lastOrientation: Float
  chat: Chat
  messages: [Message]
  coupleId: Int
  couple: Couple
  createdAt: String!
  updatedAt: String
}

type Query {
  getUser: User!
}

type Verification {
  id: Int!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String
}
